<?xml version="1.0" encoding="utf-8" ?>
<Programs xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.staubli.com/robotics/VAL3/Program/2" >
  <Program name="tskRemControl1" access="private" >
    <Locals>
      <Local name="LbError" type="bool" xsi:type="array" size="1" />
      <Local name="LbRemControlEnd" type="bool" xsi:type="array" size="1" />
      <Local name="LbRemoteDone" type="bool" xsi:type="array" size="1" />
      <Local name="LnIdx" type="num" xsi:type="array" size="1" />
      <Local name="LnLoginCounter" type="num" xsi:type="array" size="1" />
      <Local name="LnTimerStart" type="num" xsi:type="array" size="1" />
      <Local name="LnTimerValue" type="num" xsi:type="array" size="1" />
      <Local name="LsCommandString" type="string" xsi:type="array" size="1" />
      <Local name="LsCubeValsXPP" type="string" xsi:type="array" size="1" />
      <Local name="LsCylValsXPP" type="string" xsi:type="array" size="1" />
      <Local name="LsESTOPXPP" type="string" xsi:type="array" size="1" />
      <Local name="LsError" type="string" xsi:type="array" size="1" />
      <Local name="LsJointValsXPP" type="string" xsi:type="array" size="1" />
      <Local name="LsLength" type="string" xsi:type="array" size="1" />
      <Local name="LsResponse" type="string" xsi:type="array" size="1" />
      <Local name="LsSphValsXPP" type="string" xsi:type="array" size="1" />
      <Local name="LsTCPValsXPP" type="string" xsi:type="array" size="1" />
    </Locals>
    <Code><![CDATA[begin
  // PROGRAM tskRemControl1()
  //
  // Accepts commands sent from IOC and responds accordingly.
  // This program will always be running in a "read-only" mode, where we
  // allow only commands that begin with "GET" as well as "ENABLEREMOTE"
  //
  // We can switch to the "write-enabled" mode from the MCP or by sending
  // "ENABLEREMOTE". We can switch back to the "read-only" mode (MANUAL)
  // by sending "HALTREMOTE" or by pressing 1 on the MCP.
  //
  // Commands are of the form "CMD ARG1 ARG2 ARG3..." and respond with
  // "CMD VAL1 VAL2 VAL3...", or instead with "ERROR ###: Text" if something
  // goes wrong.
  //
  // start infinite loop
  do
    // start remCmdHandler with bRemControlON=false for limit to get commands and no putln
    if taskStatus("xppCmdHandler")!=1
      if (taskStatus("xppCmdHandler")==125)
        logMsg("read-only xppCmdHandler dead, restarting...")
        taskKill("xppCmdHandler")
        wait(taskStatus("xppCmdHandler")==-1)
        clearBuffer(sioXPPclient)
      endIf
      logMsg("start remCmdHandler for passive commands...")
      taskCreate "xppCmdHandler",30,remCmdHandler()
      wait(taskStatus("xppCmdHandler")==1)
    endIf
    //
    // bRemControlON set in pgm mnuUtility()
    if bRemControlON==true
      userPage()
      cls()
      title(" REMOTE CONTROL REQUESTED ")
      // test for ESTOP, request action if active
      if esStatus()!=0
        gotoxy(0,4)
        putln("WAITING:  Reset ESTOP")
        wait(esStatus()==0)
      endIf
      //
      // setup user page & open XPP via ethernet socket as CS8 Server socket connection
      userPage()
      cls()
      title(" REMOTE CONTROL ACTIVE ")
      cls()
      putln("Start Remote Control, arm power OFF")
      logMsg("Start Remote Control, arm power OFF")
      bKillRemControl=false
      // bKillRemControl is set in tskCmdHandler() and reacted to in following do-until loop
      if taskStatus("xppCmdHandler")!=1
        logMsg("xppCmdHandler task OFF, starting...")
        putln("XPP Cmd Handler task OFF, starting...")
        taskCreate "xppCmdHandler",30,remCmdHandler()
        wait(taskStatus("xppCmdHandler")==1)
      endIf
      logMsg("xppCmdHandler active now")
      putln("XPP Command Handler task ON")

      // Test for simulated ESTOP
      if bSimulateESTOP==true
        if taskStatus("SimESTOP")==-1
          taskCreate "SimESTOP",35,tskSimESTOP()
          wait(taskStatus("SimESTOP")==1)
        endIf
      endIf
      bSimESTOPOn=false

      wait(taskStatus("RemoteMotion")==1)
      putln(" ")
      putln("LISTENING for XPP Client now...")
      logMsg("listening XPP now")
      LbRemControlEnd=false
      do
        // monitor ESTOP status during remote control, manage restart if needed
        if esStatus()!=0 or bSimESTOPOn==true
          cls()
          putln("ESTOP ESTOP ESTOP ESTOP")
          logMsg("FAULT:  ESTOP!")
          call xppWriteBack("ESTOPSTATX"+" "+toString(".0",esStatus()))
          logMsg("kill tskRemMotion on ESTOP")
          putln("kill Remote Motion task on ESTOP")
          sXPPCommand=""
          sRemMotionCmd=""
          taskKill("RemoteMotion")
          wait(taskStatus("RemoteMotion")!=1)
          logMsg("tskRemMotion killed on ESTOP")
          putln("Remote Motion task killed on ESTOP")
          stopMove()
          resetMotion()
          disablePower()
          wait(isPowered()==false)
          bRemMotionBusy=false
          //
          putln("")
          if bSimulateESTOP==true
            putln("delay 5 sec for ESTOP RESET")
            delay(5)
            putln("sim ESTOP RESET done, CONTINUE")
            bSimESTOPOn=false
          else
            putln("WAITING:  reset ESTOP")
            logMsg("WAITING:  reset ESTOP")
            wait(esStatus()==0)
            putln("ESTOP has been RESET!")
            logMsg("ESTOP has been RESET!")
          endIf
          putln("")
        endIf
        //
        // monitor bKillRemControl set in tskCmdHandler, stop tskCmdHandler if needed
        if bKillRemControl==true
          //call xppWriteBack("REMOTEHALT")
          putln("XPP requested HALT REMOTE CONTROL")
          logMsg("XPP requested HALT REMOTE CONTROL")
          stopMove()
          resetMotion()
          bRemMotionBusy=false
          //
          // kill Remote Motion task
          bRemControlON=false
          putln("STOPPING RemoteMotion task...")
          logMsg("STOPPING RemoteMotion task...")
          taskKill("RemoteMotion")
          wait(taskStatus("RemoteMotion")!=1)
          putln("RemoteMotion task STOPPED!")
          logMsg("RemoteMotion task STOPPED!")
          LbRemControlEnd=true
          //
          if bSimulateESTOP==true
            // kill ESTOP Simulation task
            putln("STOPPING ESTOP Simulator task...")
            logMsg("STOPPING ESTOP Simulator task...")
            taskKill("SimESTOP")
            wait(taskStatus("SimESTOP")!=1)
            putln("ESTOP Simulator task STOPPED!")
            logMsg("ESTOP Similator task STOPPED!")
          endIf
        endIf

        // Code adapted from Jan Meyer to reopen socket in the event that xppCmdHandler hangs
        // works by checking if taskStatus("xppCmdHandler")==125 (Read or write error on a dio, aio, sio)
        if (taskStatus("xppCmdHandler")!=1 and taskStatus("xppCmdHandler")!=-1)
          // reopen socket on error
          if (taskStatus("xppCmdHandler")==125)
            putln("R/W error on sioXPPclient")
            putln("Killing xppCmdHandler")
            taskKill("xppCmdHandler")
            wait(taskStatus("xppCmdHandler")==-1)
            putln("xppCmdHandler dead. Restarting...")
            clearBuffer(sioXPPclient)
            logMsg("xppCmdHandler task OFF, starting...")
            taskCreate "xppCmdHandler",30,remCmdHandler()
            wait(taskStatus("xppCmdHandler")==1)
            logMsg("xppCmdHandler active now")
            putln("XPP Command Handler task ON")
          endIf
        endIf

        delay(0)
      until LbRemControlEnd==true
      putln("")
      //
      cls()
      title(" MANUAL CONTROL REQUESTED ")
      gotoxy(0,4)
      putln("WAITING:  Arm Power Disable")
      disablePower()
      wait(isPowered()==false)
      cls()
      gotoxy(0,4)
      putln("WAITING:  Change to MANUAL MODE")
      wait(workingMode()==1)
      cls()
      gotoxy(0,4)
      putln("  Press ESC to return to manual menu.")
    endIf
    //
    delay(0)
  until false
  //
  //done
end]]></Code>
  </Program>
</Programs>